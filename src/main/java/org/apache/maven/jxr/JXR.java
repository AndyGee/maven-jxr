package org.apache.maven.jxr;

/* ====================================================================
 *   Copyright 2001-2004 The Apache Software Foundation.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * ====================================================================
 */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.maven.jxr.ant.DirectoryScanner;
import org.apache.maven.jxr.pacman.PackageManager;

import java.io.File;
import java.io.IOException;

/**
 * Main entry point into Maven used to kick off the XReference code building.
 *
 * @author <a href="mailto:burton@apache.org">Kevin A. Burton</a>
 * @version $Id$
 */
public class JXR
{
    /**
     * Log.
     */
    private static final Log log = LogFactory.getLog( JxrBean.class );

    /**
     * Description of the Field
     */
    public final static String NOTICE = "This page was automatically generated by " +
        "<a href=\"http://maven.apache.org/\">Maven</a>";

    /**
     * Path to all source.files
     */
    private String source = "";

    /**
     * Path to destination
     */
    private String dest = "";

    private String lang;

    private String inputEncoding;

    private String outputEncoding;

    /**
     * Relative path to javadocs, suitable for hyperlinking
     */
    private String javadocLinkDir;

    /**
     * Handles taking .java files and changing them into html. "More than meets
     * the eye!" :)
     */
    private CodeTransform transformer;

    /**
     * The revision of the module currently being processed.
     */
    private String revision;

    /**
     * The constructor for the JXR class.
     *
     * @param packageManager The Package Manager for this project
     * @param revision The CVS revision of this file.
     * @param source The directory that files are being read from (src/java)
     * @param source
     * @param dest
     */
    public JXR( PackageManager packageManager, String source, String dest, String lang, String inputEncoding,
                String outputEncoding, String javadocLinkDir, String revision )
    {
        this.transformer = new CodeTransform( packageManager );
        this.source = source;
        this.dest = dest;
        this.lang = lang;
        this.inputEncoding = inputEncoding;
        this.outputEncoding = outputEncoding;
        this.javadocLinkDir = javadocLinkDir;
        this.revision = revision;

        this.process();
    }


    /**
     * Now that we have instantiated everythign. Process this JXR task.
     */
    private void process()
    {

        DirectoryScanner ds = new DirectoryScanner();
        ds.addDefaultExcludes();

        File dir = new File( this.getSource() );

        if ( !dir.exists() )
        {
            if ( dir.mkdirs() == false )
            {
                throw new IllegalStateException(
                    "Your source directory does not exist and could not be created:" + this.getSource() );
            }
        }

        ds.setBasedir( this.getSource() );
        ds.scan();

        //now get the list of included files

        String[] files = ds.getIncludedFiles();

        for ( int i = 0; i < files.length; ++i )
        {
            if ( !updated( files[i] ) )
            {
                String source = this.getSource() + System.getProperty( "file.separator" ) + files[i];

                try
                {

                    if ( isJavaFile( source ) )
                    {
                        transform( source, getDestination( source ) );
                    }

                }
                catch ( IOException e )
                {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Check to see if the file is a Java source file
     *
     * @param filename The name of the file to check
     * @return <code>true
     *         </true>
     *         if the file is a Java file
     */
    public static boolean isJavaFile( String filename )
    {
        File file = new File( filename );
        return filename.endsWith( ".java" ) && file.length() > 0;
    }

    /**
     * Check to see if the file is a HTML file
     *
     * @param filename The name of the file to check
     * @return <code>true
     *         </true>
     *         if the file is a HTML file
     */
    public static boolean isHtmlFile( String filename )
    {
        return filename.endsWith( ".html" );
    }

    /**
     * Given a filename get the destination on the filesystem of where to store
     * the to be generated HTML file. Pay attention to the package name.
     *
     * @param filename The name of the file to find
     * @return A String with the store destination.
     */
    private String getDestination( String filename )
    {

        String dest = new String( filename );

        //remove the source directory from the filename.

        dest = dest.substring( this.getSource().length(), dest.length() );

        int start = 0;
        int end = dest.indexOf( ".java" );

        if ( end != -1 )
        {
            //remove the .java from the filename
            dest = dest.substring( start, end );
        }

        //add the destination directory to the filename.
        dest = this.getDest() + dest;

        //add .html to the filename

        dest = dest + ".html";

        return dest;
    }

    /**
     * Given a source file transform it into HTML and write it to the
     * destination (dest) file.
     *
     * @param source The jave source file
     * @param dest The directory to put the HTML into
     * @throws IOException Thrown if the transform can't happen for some reason.
     */
    private void transform( String source, String dest )
        throws IOException
    {

        log.debug( source + " -> " + dest );

        transformer.transform( source, dest, lang, inputEncoding, outputEncoding, javadocLinkDir, this.revision );

    }

    /**
     * <p>
     *
     * Given a java source file determine if this needs updating. This is
     * determined by:</p>
     * <ul>
     * <li> The class doesn't exist in the destination directory</li>
     * <li> The file does exist in the destination directory but is older</li>
     *
     * </ul>
     */
    private boolean updated( String file )
    {
        return false;
    }

    /**
     * Get the path to the source files
     *
     * @return The path to the source files
     */
    public String getSource()
    {
        return this.source;
    }

    /**
     * Get the path to the destination files
     *
     * @return The path to the destination files
     */
    public String getDest()
    {
        return this.dest;
    }

}

